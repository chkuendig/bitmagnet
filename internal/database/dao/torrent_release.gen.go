// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/bitmagnet-io/bitmagnet/internal/model"
)

func newTorrentRelease(db *gorm.DB, opts ...gen.DOOption) torrentRelease {
	_torrentRelease := torrentRelease{}

	_torrentRelease.torrentReleaseDo.UseDB(db, opts...)
	_torrentRelease.torrentReleaseDo.UseModel(&model.TorrentRelease{})

	tableName := _torrentRelease.torrentReleaseDo.TableName()
	_torrentRelease.ALL = field.NewAsterisk(tableName)
	_torrentRelease.Torrent = field.NewBytes(tableName, "torrent")
	_torrentRelease.Release = field.NewString(tableName, "release")

	_torrentRelease.fillFieldMap()

	return _torrentRelease
}

type torrentRelease struct {
	torrentReleaseDo

	ALL     field.Asterisk
	Torrent field.Bytes
	Release field.String

	fieldMap map[string]field.Expr
}

func (t torrentRelease) Table(newTableName string) *torrentRelease {
	t.torrentReleaseDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t torrentRelease) As(alias string) *torrentRelease {
	t.torrentReleaseDo.DO = *(t.torrentReleaseDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *torrentRelease) updateTableName(table string) *torrentRelease {
	t.ALL = field.NewAsterisk(table)
	t.Torrent = field.NewBytes(table, "torrent")
	t.Release = field.NewString(table, "release")

	t.fillFieldMap()

	return t
}

func (t *torrentRelease) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *torrentRelease) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 2)
	t.fieldMap["torrent"] = t.Torrent
	t.fieldMap["release"] = t.Release
}

func (t torrentRelease) clone(db *gorm.DB) torrentRelease {
	t.torrentReleaseDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t torrentRelease) replaceDB(db *gorm.DB) torrentRelease {
	t.torrentReleaseDo.ReplaceDB(db)
	return t
}

type torrentReleaseDo struct{ gen.DO }

type ITorrentReleaseDo interface {
	gen.SubQuery
	Debug() ITorrentReleaseDo
	WithContext(ctx context.Context) ITorrentReleaseDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITorrentReleaseDo
	WriteDB() ITorrentReleaseDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITorrentReleaseDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITorrentReleaseDo
	Not(conds ...gen.Condition) ITorrentReleaseDo
	Or(conds ...gen.Condition) ITorrentReleaseDo
	Select(conds ...field.Expr) ITorrentReleaseDo
	Where(conds ...gen.Condition) ITorrentReleaseDo
	Order(conds ...field.Expr) ITorrentReleaseDo
	Distinct(cols ...field.Expr) ITorrentReleaseDo
	Omit(cols ...field.Expr) ITorrentReleaseDo
	Join(table schema.Tabler, on ...field.Expr) ITorrentReleaseDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITorrentReleaseDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITorrentReleaseDo
	Group(cols ...field.Expr) ITorrentReleaseDo
	Having(conds ...gen.Condition) ITorrentReleaseDo
	Limit(limit int) ITorrentReleaseDo
	Offset(offset int) ITorrentReleaseDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITorrentReleaseDo
	Unscoped() ITorrentReleaseDo
	Create(values ...*model.TorrentRelease) error
	CreateInBatches(values []*model.TorrentRelease, batchSize int) error
	Save(values ...*model.TorrentRelease) error
	First() (*model.TorrentRelease, error)
	Take() (*model.TorrentRelease, error)
	Last() (*model.TorrentRelease, error)
	Find() ([]*model.TorrentRelease, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TorrentRelease, err error)
	FindInBatches(result *[]*model.TorrentRelease, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TorrentRelease) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITorrentReleaseDo
	Assign(attrs ...field.AssignExpr) ITorrentReleaseDo
	Joins(fields ...field.RelationField) ITorrentReleaseDo
	Preload(fields ...field.RelationField) ITorrentReleaseDo
	FirstOrInit() (*model.TorrentRelease, error)
	FirstOrCreate() (*model.TorrentRelease, error)
	FindByPage(offset int, limit int) (result []*model.TorrentRelease, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITorrentReleaseDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t torrentReleaseDo) Debug() ITorrentReleaseDo {
	return t.withDO(t.DO.Debug())
}

func (t torrentReleaseDo) WithContext(ctx context.Context) ITorrentReleaseDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t torrentReleaseDo) ReadDB() ITorrentReleaseDo {
	return t.Clauses(dbresolver.Read)
}

func (t torrentReleaseDo) WriteDB() ITorrentReleaseDo {
	return t.Clauses(dbresolver.Write)
}

func (t torrentReleaseDo) Session(config *gorm.Session) ITorrentReleaseDo {
	return t.withDO(t.DO.Session(config))
}

func (t torrentReleaseDo) Clauses(conds ...clause.Expression) ITorrentReleaseDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t torrentReleaseDo) Returning(value interface{}, columns ...string) ITorrentReleaseDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t torrentReleaseDo) Not(conds ...gen.Condition) ITorrentReleaseDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t torrentReleaseDo) Or(conds ...gen.Condition) ITorrentReleaseDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t torrentReleaseDo) Select(conds ...field.Expr) ITorrentReleaseDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t torrentReleaseDo) Where(conds ...gen.Condition) ITorrentReleaseDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t torrentReleaseDo) Order(conds ...field.Expr) ITorrentReleaseDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t torrentReleaseDo) Distinct(cols ...field.Expr) ITorrentReleaseDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t torrentReleaseDo) Omit(cols ...field.Expr) ITorrentReleaseDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t torrentReleaseDo) Join(table schema.Tabler, on ...field.Expr) ITorrentReleaseDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t torrentReleaseDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITorrentReleaseDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t torrentReleaseDo) RightJoin(table schema.Tabler, on ...field.Expr) ITorrentReleaseDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t torrentReleaseDo) Group(cols ...field.Expr) ITorrentReleaseDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t torrentReleaseDo) Having(conds ...gen.Condition) ITorrentReleaseDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t torrentReleaseDo) Limit(limit int) ITorrentReleaseDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t torrentReleaseDo) Offset(offset int) ITorrentReleaseDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t torrentReleaseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITorrentReleaseDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t torrentReleaseDo) Unscoped() ITorrentReleaseDo {
	return t.withDO(t.DO.Unscoped())
}

func (t torrentReleaseDo) Create(values ...*model.TorrentRelease) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t torrentReleaseDo) CreateInBatches(values []*model.TorrentRelease, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t torrentReleaseDo) Save(values ...*model.TorrentRelease) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t torrentReleaseDo) First() (*model.TorrentRelease, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TorrentRelease), nil
	}
}

func (t torrentReleaseDo) Take() (*model.TorrentRelease, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TorrentRelease), nil
	}
}

func (t torrentReleaseDo) Last() (*model.TorrentRelease, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TorrentRelease), nil
	}
}

func (t torrentReleaseDo) Find() ([]*model.TorrentRelease, error) {
	result, err := t.DO.Find()
	return result.([]*model.TorrentRelease), err
}

func (t torrentReleaseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TorrentRelease, err error) {
	buf := make([]*model.TorrentRelease, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t torrentReleaseDo) FindInBatches(result *[]*model.TorrentRelease, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t torrentReleaseDo) Attrs(attrs ...field.AssignExpr) ITorrentReleaseDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t torrentReleaseDo) Assign(attrs ...field.AssignExpr) ITorrentReleaseDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t torrentReleaseDo) Joins(fields ...field.RelationField) ITorrentReleaseDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t torrentReleaseDo) Preload(fields ...field.RelationField) ITorrentReleaseDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t torrentReleaseDo) FirstOrInit() (*model.TorrentRelease, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TorrentRelease), nil
	}
}

func (t torrentReleaseDo) FirstOrCreate() (*model.TorrentRelease, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TorrentRelease), nil
	}
}

func (t torrentReleaseDo) FindByPage(offset int, limit int) (result []*model.TorrentRelease, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t torrentReleaseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t torrentReleaseDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t torrentReleaseDo) Delete(models ...*model.TorrentRelease) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *torrentReleaseDo) withDO(do gen.Dao) *torrentReleaseDo {
	t.DO = *do.(*gen.DO)
	return t
}
