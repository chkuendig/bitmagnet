// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/bitmagnet-io/bitmagnet/internal/model"
)

func newReleasePre(db *gorm.DB, opts ...gen.DOOption) releasePre {
	_releasePre := releasePre{}

	_releasePre.releasePreDo.UseDB(db, opts...)
	_releasePre.releasePreDo.UseModel(&model.ReleasePre{})

	tableName := _releasePre.releasePreDo.TableName()
	_releasePre.ALL = field.NewAsterisk(tableName)
	_releasePre.Name = field.NewString(tableName, "name")
	_releasePre.Nfo = field.NewField(tableName, "nfo")
	_releasePre.Size = field.NewField(tableName, "size")
	_releasePre.Files = field.NewField(tableName, "files")
	_releasePre.Filename = field.NewField(tableName, "filename")
	_releasePre.Nuked = field.NewInt32(tableName, "nuked")
	_releasePre.Nukereason = field.NewField(tableName, "nukereason")
	_releasePre.Category = field.NewField(tableName, "category")
	_releasePre.Created = field.NewTime(tableName, "created")
	_releasePre.Source = field.NewString(tableName, "source")
	_releasePre.Requestid = field.NewField(tableName, "requestid")
	_releasePre.Groupname = field.NewField(tableName, "groupname")
	_releasePre.NzedbpreDump = field.NewTime(tableName, "nzedbpre_dump")

	_releasePre.fillFieldMap()

	return _releasePre
}

type releasePre struct {
	releasePreDo

	ALL          field.Asterisk
	Name         field.String
	Nfo          field.Field
	Size         field.Field
	Files        field.Field
	Filename     field.Field
	Nuked        field.Int32
	Nukereason   field.Field
	Category     field.Field
	Created      field.Time
	Source       field.String
	Requestid    field.Field
	Groupname    field.Field
	NzedbpreDump field.Time

	fieldMap map[string]field.Expr
}

func (r releasePre) Table(newTableName string) *releasePre {
	r.releasePreDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r releasePre) As(alias string) *releasePre {
	r.releasePreDo.DO = *(r.releasePreDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *releasePre) updateTableName(table string) *releasePre {
	r.ALL = field.NewAsterisk(table)
	r.Name = field.NewString(table, "name")
	r.Nfo = field.NewField(table, "nfo")
	r.Size = field.NewField(table, "size")
	r.Files = field.NewField(table, "files")
	r.Filename = field.NewField(table, "filename")
	r.Nuked = field.NewInt32(table, "nuked")
	r.Nukereason = field.NewField(table, "nukereason")
	r.Category = field.NewField(table, "category")
	r.Created = field.NewTime(table, "created")
	r.Source = field.NewString(table, "source")
	r.Requestid = field.NewField(table, "requestid")
	r.Groupname = field.NewField(table, "groupname")
	r.NzedbpreDump = field.NewTime(table, "nzedbpre_dump")

	r.fillFieldMap()

	return r
}

func (r *releasePre) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *releasePre) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 13)
	r.fieldMap["name"] = r.Name
	r.fieldMap["nfo"] = r.Nfo
	r.fieldMap["size"] = r.Size
	r.fieldMap["files"] = r.Files
	r.fieldMap["filename"] = r.Filename
	r.fieldMap["nuked"] = r.Nuked
	r.fieldMap["nukereason"] = r.Nukereason
	r.fieldMap["category"] = r.Category
	r.fieldMap["created"] = r.Created
	r.fieldMap["source"] = r.Source
	r.fieldMap["requestid"] = r.Requestid
	r.fieldMap["groupname"] = r.Groupname
	r.fieldMap["nzedbpre_dump"] = r.NzedbpreDump
}

func (r releasePre) clone(db *gorm.DB) releasePre {
	r.releasePreDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r releasePre) replaceDB(db *gorm.DB) releasePre {
	r.releasePreDo.ReplaceDB(db)
	return r
}

type releasePreDo struct{ gen.DO }

type IReleasePreDo interface {
	gen.SubQuery
	Debug() IReleasePreDo
	WithContext(ctx context.Context) IReleasePreDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReleasePreDo
	WriteDB() IReleasePreDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReleasePreDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReleasePreDo
	Not(conds ...gen.Condition) IReleasePreDo
	Or(conds ...gen.Condition) IReleasePreDo
	Select(conds ...field.Expr) IReleasePreDo
	Where(conds ...gen.Condition) IReleasePreDo
	Order(conds ...field.Expr) IReleasePreDo
	Distinct(cols ...field.Expr) IReleasePreDo
	Omit(cols ...field.Expr) IReleasePreDo
	Join(table schema.Tabler, on ...field.Expr) IReleasePreDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReleasePreDo
	RightJoin(table schema.Tabler, on ...field.Expr) IReleasePreDo
	Group(cols ...field.Expr) IReleasePreDo
	Having(conds ...gen.Condition) IReleasePreDo
	Limit(limit int) IReleasePreDo
	Offset(offset int) IReleasePreDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReleasePreDo
	Unscoped() IReleasePreDo
	Create(values ...*model.ReleasePre) error
	CreateInBatches(values []*model.ReleasePre, batchSize int) error
	Save(values ...*model.ReleasePre) error
	First() (*model.ReleasePre, error)
	Take() (*model.ReleasePre, error)
	Last() (*model.ReleasePre, error)
	Find() ([]*model.ReleasePre, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReleasePre, err error)
	FindInBatches(result *[]*model.ReleasePre, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ReleasePre) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReleasePreDo
	Assign(attrs ...field.AssignExpr) IReleasePreDo
	Joins(fields ...field.RelationField) IReleasePreDo
	Preload(fields ...field.RelationField) IReleasePreDo
	FirstOrInit() (*model.ReleasePre, error)
	FirstOrCreate() (*model.ReleasePre, error)
	FindByPage(offset int, limit int) (result []*model.ReleasePre, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReleasePreDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r releasePreDo) Debug() IReleasePreDo {
	return r.withDO(r.DO.Debug())
}

func (r releasePreDo) WithContext(ctx context.Context) IReleasePreDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r releasePreDo) ReadDB() IReleasePreDo {
	return r.Clauses(dbresolver.Read)
}

func (r releasePreDo) WriteDB() IReleasePreDo {
	return r.Clauses(dbresolver.Write)
}

func (r releasePreDo) Session(config *gorm.Session) IReleasePreDo {
	return r.withDO(r.DO.Session(config))
}

func (r releasePreDo) Clauses(conds ...clause.Expression) IReleasePreDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r releasePreDo) Returning(value interface{}, columns ...string) IReleasePreDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r releasePreDo) Not(conds ...gen.Condition) IReleasePreDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r releasePreDo) Or(conds ...gen.Condition) IReleasePreDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r releasePreDo) Select(conds ...field.Expr) IReleasePreDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r releasePreDo) Where(conds ...gen.Condition) IReleasePreDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r releasePreDo) Order(conds ...field.Expr) IReleasePreDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r releasePreDo) Distinct(cols ...field.Expr) IReleasePreDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r releasePreDo) Omit(cols ...field.Expr) IReleasePreDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r releasePreDo) Join(table schema.Tabler, on ...field.Expr) IReleasePreDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r releasePreDo) LeftJoin(table schema.Tabler, on ...field.Expr) IReleasePreDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r releasePreDo) RightJoin(table schema.Tabler, on ...field.Expr) IReleasePreDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r releasePreDo) Group(cols ...field.Expr) IReleasePreDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r releasePreDo) Having(conds ...gen.Condition) IReleasePreDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r releasePreDo) Limit(limit int) IReleasePreDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r releasePreDo) Offset(offset int) IReleasePreDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r releasePreDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReleasePreDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r releasePreDo) Unscoped() IReleasePreDo {
	return r.withDO(r.DO.Unscoped())
}

func (r releasePreDo) Create(values ...*model.ReleasePre) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r releasePreDo) CreateInBatches(values []*model.ReleasePre, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r releasePreDo) Save(values ...*model.ReleasePre) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r releasePreDo) First() (*model.ReleasePre, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReleasePre), nil
	}
}

func (r releasePreDo) Take() (*model.ReleasePre, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReleasePre), nil
	}
}

func (r releasePreDo) Last() (*model.ReleasePre, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReleasePre), nil
	}
}

func (r releasePreDo) Find() ([]*model.ReleasePre, error) {
	result, err := r.DO.Find()
	return result.([]*model.ReleasePre), err
}

func (r releasePreDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReleasePre, err error) {
	buf := make([]*model.ReleasePre, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r releasePreDo) FindInBatches(result *[]*model.ReleasePre, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r releasePreDo) Attrs(attrs ...field.AssignExpr) IReleasePreDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r releasePreDo) Assign(attrs ...field.AssignExpr) IReleasePreDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r releasePreDo) Joins(fields ...field.RelationField) IReleasePreDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r releasePreDo) Preload(fields ...field.RelationField) IReleasePreDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r releasePreDo) FirstOrInit() (*model.ReleasePre, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReleasePre), nil
	}
}

func (r releasePreDo) FirstOrCreate() (*model.ReleasePre, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReleasePre), nil
	}
}

func (r releasePreDo) FindByPage(offset int, limit int) (result []*model.ReleasePre, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r releasePreDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r releasePreDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r releasePreDo) Delete(models ...*model.ReleasePre) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *releasePreDo) withDO(do gen.Dao) *releasePreDo {
	r.DO = *do.(*gen.DO)
	return r
}
